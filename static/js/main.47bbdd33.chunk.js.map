{"version":3,"sources":["modules/search/queries.js","modules/repos/Repo.js","modules/user/queries.js","modules/repos/ReposList.js","modules/user/User.js","modules/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["SEARCH_USER_QUERY","gql","_templateObject","Repo","_ref","repoName","language","description","dateCreated","react_default","a","createElement","className","concat","USER_REPOSITORIES_QUERY","queries_templateObject","ReposList","state","reposCursor","login","this","props","react_apollo_browser_umd","query","variables","userLogin","skip","notifyOnNetworkStatusChange","data","loading","error","fetchMore","console","log","repositoryOwner","repositories","reposList","edges","map","repo","index","_repo$node","node","name","primaryLanguage","createdAt","slice","repos_Repo","pageInfo","hasNextPage","onClick","endCursor","updateQuery","previousResult","_ref2","newRepos","fetchMoreResult","newEdges","length","Object","objectSpread","__typename","toConsumableArray","Component","User","showFetchedRepositories","prepareUserParameter","paramName","paramValue","key","getUserParamsAsArray","userData","keys","objKey","_this","showRepositories","repos_ReposList","fetchRepositories","e","preventDefault","setState","userParams","param","withApollo","Search","searchInput","isSearching","showLoading","isUserFetched","searchForUser","_callee","user","result","regenerator_default","wrap","_context","prev","next","abrupt","prevState","client","errorPolicy","sent","prepareUserData","prototype","hasOwnProperty","call","message","stop","saveSearchInput","target","value","incomeUserObj","email","url","bio","location","company","followers","organizations","totalCount","onEnterPress","keyCode","_this$state","type","onChange","onKeyDown","user_User","App","search_Search","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","httpLink","HttpLink","uri","process","headers","authorization","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.47bbdd33.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const SEARCH_USER_QUERY = gql`\n  query($userLogin: String!) {\n    user(login: $userLogin) {\n      login\n      url\n      name\n      bio\n      company\n      email\n      followers {\n        totalCount\n      }\n      location\n      organizations {\n        totalCount\n      }\n      repositories (privacy: PUBLIC, isFork: false) {\n        totalCount\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nconst Repo = ({ \n  repoName,\n  language,\n  description,\n  dateCreated\n}) => (\n  <div className='repoBlock'>\n    <p className='repoName'><span>{repoName}</span></p>\n    <p className='repoTextData'>Repository created: {dateCreated}. {\n      language \n      ? ` Main language - ${language}` \n      : ''}\n    </p>\n    <p className='repoTextData repoDescription'>{description}</p>\n  </div>\n);\n\nexport default Repo;","import gql from \"graphql-tag\";\n\nexport const REPOS_ON_PAGE = 7;\n\nexport const USER_REPOSITORIES_QUERY = gql`\n  query ($userLogin: String!, $reposCursor: String) {\n    repositoryOwner(login: $userLogin) {\n      id\n      avatarUrl\n      repositories(privacy: PUBLIC, isLocked: false, isFork: false, first: 5, after: $reposCursor) {\n        totalCount\n        edges {\n          node {\n            id\n            name\n            createdAt\n            description\n            primaryLanguage {\n                name\n            }\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n`;\n\n","import React, { Component } from 'react';\nimport Repo from './Repo';\nimport { USER_REPOSITORIES_QUERY } from \"../user/queries\";\nimport { Query } from 'react-apollo';\n\nclass ReposList extends Component {\n  \n  state = {\n    reposCursor: null\n  };\n\n  render() {\n    const { login} = this.props;\n    return (\n      <Query\n        query={USER_REPOSITORIES_QUERY}\n        variables={{\n          userLogin: login,\n          reposCursor: null\n        }}\n        skip={login === ''}\n        notifyOnNetworkStatusChange={true}\n      >\n        {({ data, loading, error, fetchMore }) => {\n          if (error) {\n            console.log(error);\n          }\n          const { repositoryOwner } = data;\n\n          if (loading && !repositoryOwner) {\n            return (<div className=\"loading\">Loading...</div>);\n          }\n          const { repositories } = repositoryOwner;\n\n          const reposList = repositories.edges.map((repo, index) => {\n            const { name, primaryLanguage, description, createdAt } = repo.node;\n            const language = primaryLanguage ? primaryLanguage.name : null;\n            const dateCreated = createdAt.slice(0, 10);\n            return (\n                <Repo repoName={name}\n                      language={language}\n                      dateCreated={dateCreated}\n                      description={description}\n                />\n            )\n          });\n\n          return (\n            <div>\n              { reposList }\n\n            <div>\n              { \n                repositories.pageInfo.hasNextPage && (\n                  <button onClick={() => fetchMore({\n                    variables: {\n                      userLogin: login,\n                      reposCursor: repositories.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newRepos = fetchMoreResult.repositoryOwner.repositories;\n                      const newEdges = newRepos.edges;\n                      const pageInfo = newRepos.pageInfo;\n\n                      return newEdges.length \n                        ? {\n                            ...previousResult,\n                            repositoryOwner: {\n                              ...previousResult.repositoryOwner,\n                              __typename: previousResult.repositoryOwner.__typename,\n                              repositories: {\n                                ...previousResult.repositoryOwner.repositories,\n                                __typename: previousResult.repositoryOwner.repositories.__typename,\n                                edges: [...previousResult.repositoryOwner.repositories.edges, ...newEdges],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n              }>Show more user repos</button>\n          )}\n            </div>\n            \n            </div>\n          );\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default ReposList;","import React, { Component } from \"react\";\nimport { withApollo } from \"react-apollo\";\nimport ReposList from '../repos/ReposList';\n\nclass User extends Component {\n\n  state = {\n    showFetchedRepositories: false\n  };\n\n  prepareUserParameter = (paramName, paramValue) => {\n    let parameterTemplate = paramValue \n      ? (\n          <p className=\"userParam\" key={paramName}>\n            <span className=\"userParamName\">{paramName}</span>: {paramValue}\n          </p>\n        )\n      : null\n    return parameterTemplate;\n  }\n\n  getUserParamsAsArray = (userData) => {\n    let resultKeysArray = Object.keys(userData).map((objKey) => {\n      let paramValue = userData[objKey];\n      return this.prepareUserParameter(objKey, paramValue);\n    })\n    return resultKeysArray;\n  }\n\n  showRepositories = () => {\n    const { login } = this.props.userData;\n    return (\n      <ReposList login = {login} />\n    );\n  }\n\n  fetchRepositories = (e) => {\n    e.preventDefault();\n    const { login } = this.props.userData;\n    this.setState({ showFetchedRepositories: true });\n    return (\n      <ReposList login = {login} />\n    )\n  }\n\n  render() {\n    const { userData } = this.props;\n    const { showFetchedRepositories } = this.state; \n    let userParams = this.getUserParamsAsArray(userData);\n    \n    return (\n      <div className=\"userInfoBlock\">\n        <div>\n          { userParams.map(param => (param)) }\n        </div>\n        <div>\n          <button onClick={this.fetchRepositories}>Get user repos</button>\n          {\n            showFetchedRepositories\n            ? this.showRepositories()\n            : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\nexport default withApollo(User);\n","import React, { Component } from \"react\";\nimport { withApollo } from \"react-apollo\";\nimport { SEARCH_USER_QUERY } from \"./queries\";\nimport User from \"../user/User\";\n\nclass Search extends Component {\n  state = {\n    searchInput: \"\",\n    isSearching: false,\n    showLoading: false,\n    userData: {},\n    isUserFetched: false,\n    error: null\n  };\n\n  searchForUser = async (e) => {\n    e.preventDefault();\n    let user;\n    let result;\n\n    if (!this.state.searchInput) {\n      return;\n    }\n    this.setState((prevState) => ({\n      userData: {},\n      isUserFetched: false,\n      showLoading: true\n    }));\n\n    result = await this.props.client.query({\n      query: SEARCH_USER_QUERY,\n      variables: { userLogin: this.state.searchInput },\n      loading: true,\n      errorPolicy: 'all'\n    });\n\n    if (result.data.user) {\n      user = this.prepareUserData(result.data.user);\n\n      //This trick is used to check if object is populated\n      if (Object.prototype.hasOwnProperty.call(user, \"login\")) {\n        this.setState({ isUserFetched: true });\n      }\n    } else if (result.error) {\n      this.setState((prevState) => ({\n        showLoading: !prevState.showLoading,\n        isSearching: !prevState.isSearching,\n        error: result.error[0].message\n      }));\n      return;\n    }\n\n    this.setState((prevState) => ({\n      showLoading: !prevState.showLoading,\n      isSearching: !prevState.isSearching,\n      userData: user\n    }));\n  };\n\n  saveSearchInput = e => {\n    if (e.target.value) {\n      this.setState({ searchInput: e.target.value });\n    }\n  };\n\n  showLoading = () => {\n    return this.state.showLoading ? (<div className=\"loading\">Loading...</div>) : null;\n  }\n\n  prepareUserData = incomeUserObj => {\n    let userData = {};\n    const {\n          name,\n          login,\n          email,\n          url,\n          bio,\n          location,\n          company,\n          followers,\n          repositories,\n          organizations\n        } = incomeUserObj;\n\n    userData = {\n      name,\n      login,\n      email,\n      url,\n      bio,\n      location,\n      company,\n      followers: followers.totalCount,\n      repositories: repositories.totalCount,\n      organizations: organizations.totalCount\n    };\n\n    return userData;\n  }\n\n  onEnterPress = (e) => {\n    if(e.keyCode === 13){\n      this.searchForUser(e);\n    }\n  }\n\n\n  render() {\n    const { \n      userData,\n      isUserFetched,\n      error\n    } = this.state;\n    \n    return (\n      <div className=\"searchWrapper\">\n        <div>\n          <input className=\"searchInput\"\n                 type=\"text\"\n                 onChange={this.saveSearchInput}\n                 onKeyDown={this.onEnterPress}\n          />\n          <button className=\"searchButton\"\n                  onClick={this.searchForUser}>Search for user</button>\n        </div>\n        <div>\n          {this.showLoading()}\n          {\n            isUserFetched && !error \n              ? (<User userData={userData} />)\n              : (<div className=\"errorMessage\">{error}</div>)\n          }\n        </div>\n      </div>\n    );\n  }\n}\nexport default withApollo(Search);\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchUser from './modules/search/Search';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"appWrapper\">\n        <div className=\"appHeader\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <p>\n            Check public repositories of any user!\n          </p>\n          <p>\n            Simply type user login for GitHub.\n          </p>\n        </div>\n        <SearchUser />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst httpLink = new HttpLink({\n    uri: process.env.REACT_APP_API_BASE_URL,\n    headers: {\n        authorization: `Bearer ${\n            process.env.REACT_APP_GITHUB_ACCESS_TOKEN\n        }`,\n    },\n});\n\nconst client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache(),\n  })\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\nserviceWorker();"],"sourceRoot":""}